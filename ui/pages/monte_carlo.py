import streamlit as st
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from ui.translator import translator as locale
from ui.theme_manager import theme_manager
from ui.components.header import render_header
from models.monte_carlo import MonteCarloNeutronTransport
from ui.conclusions import get_conclusions
from ui.components.charts import plotly_chart_with_theme

def render_page():
    """Hi·ªÉn th·ªã trang m√¥ ph·ªèng Monte Carlo cho neutron"""
    
    # Header
    render_header(locale.get_text("monte.header"))
    
    # C√°c th√¥ng s·ªë ƒë·∫ßu v√†o
    col1, col2 = st.columns(2)
    
    with col1:
        radius = st.slider(
            locale.get_text("monte.radius"),
            min_value=1.0,
            max_value=30.0,
            value=10.0,
            step=1.0,
            help="B√°n k√≠nh c·ªßa h·ªá th·ªëng t√≠nh b·∫±ng cm"
        )
        
        num_neutrons = st.slider(
            locale.get_text("monte.num_neutrons"),
            min_value=100,
            max_value=10000,
            value=1000,
            step=100,
            help="S·ªë l∆∞·ª£ng neutron ƒë·ªÉ m√¥ ph·ªèng"
        )
        
        initial_distribution = st.selectbox(
            "Ph√¢n b·ªë ban ƒë·∫ßu c·ªßa neutron",
            options=["point", "uniform", "gaussian"],
            index=0,
            format_func=lambda x: {
                "point": "T·∫°i t√¢m (ƒëi·ªÉm)",
                "uniform": "ƒê·ªìng ƒë·ªÅu trong h·ªá th·ªëng", 
                "gaussian": "Gaussian xung quanh t√¢m"
            }.get(x, x),
            help="Ph√¢n b·ªë kh√¥ng gian ban ƒë·∫ßu c·ªßa neutron"
        )
    
    with col2:
        fission_xs = st.slider(
            locale.get_text("monte.fission"),
            min_value=0.01,
            max_value=0.5,
            value=0.05,
            step=0.01,
            help="Ti·∫øt di·ªán ph√¢n h·∫°ch"
        )
        
        scattering_xs = st.slider(
            locale.get_text("monte.scattering"),
            min_value=0.05,
            max_value=1.0,
            value=0.2,
            step=0.05,
            help="Ti·∫øt di·ªán t√°n x·∫°"
        )
        
        absorption_xs = st.slider(
            locale.get_text("monte.absorption"),
            min_value=0.001,
            max_value=0.1,
            value=0.01,
            step=0.001,
            help="Ti·∫øt di·ªán h·∫•p th·ª•"
        )
    
    # T√πy ch·ªçn n√¢ng cao
    with st.expander(locale.get_text("monte.advanced_options"), expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            fission_neutrons = st.slider(
                locale.get_text("monte.average_fission_neutrons"),
                min_value=1.0,
                max_value=5.0,
                value=2.43,
                step=0.01,
                help="S·ªë neutron trung b√¨nh sinh ra t·ª´ m·ªói ph·∫£n ·ª©ng ph√¢n h·∫°ch"
            )
            
            energy_groups = st.slider(
                "S·ªë nh√≥m nƒÉng l∆∞·ª£ng",
                min_value=1,
                max_value=7,
                value=1,
                step=1,
                help="S·ªë nh√≥m nƒÉng l∆∞·ª£ng cho t√≠nh to√°n ƒëa nh√≥m (1 = m·ªôt nh√≥m)"
            )
            
            max_generations = st.slider(
                "S·ªë th·∫ø h·ªá t·ªëi ƒëa",
                min_value=5,
                max_value=50,
                value=20,
                step=5,
                help="S·ªë th·∫ø h·ªá t·ªëi ƒëa cho m√¥ ph·ªèng chu·ªói ph√¢n h·∫°ch"
            )
        
        with col2:
            show_progress = st.checkbox(locale.get_text("monte.show_progress"), value=True,
                                       help="Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh trong qu√° tr√¨nh m√¥ ph·ªèng")
            
            fission_chain = st.checkbox(locale.get_text("monte.simulate_fission_chain"), value=True,
                                       help="M√¥ ph·ªèng chu·ªói ph·∫£n ·ª©ng ph√¢n h·∫°ch ƒë·ªÉ t√≠nh h·ªá s·ªë nh√¢n neutron k-hi·ªáu qu·∫£")
            
            use_parallel = st.checkbox("S·ª≠ d·ª•ng t√≠nh to√°n song song", value=False,
                                      help="TƒÉng t·ªëc m√¥ ph·ªèng b·∫±ng c√°ch s·ª≠ d·ª•ng nhi·ªÅu l√µi CPU")
            
            if use_parallel:
                import multiprocessing as mp
                max_cores = mp.cpu_count()
                n_cores = st.slider("S·ªë l√µi CPU s·ª≠ d·ª•ng", 
                                  min_value=1, 
                                  max_value=max_cores, 
                                  value=max(1, max_cores-1),
                                  help=f"H·ªá th·ªëng c·ªßa b·∫°n c√≥ {max_cores} l√µi CPU")
            else:
                n_cores = None
    
    # Ch·∫°y m√¥ ph·ªèng
    if st.button(locale.get_text("monte.button"), type="primary", use_container_width=True):
        with st.spinner("ƒêang ch·∫°y m√¥ ph·ªèng Monte Carlo..."):
            # T·∫°o model
            model = MonteCarloNeutronTransport(
                radius=radius,
                fission_xs=fission_xs,
                scattering_xs=scattering_xs,
                absorption_xs=absorption_xs,
                fission_neutrons=fission_neutrons,
                energy_groups=energy_groups,
                max_generations=max_generations,
                initial_distribution=initial_distribution
            )
            
            # Ch·∫°y m√¥ ph·ªèng
            results = model.simulate_neutrons(
                num_neutrons=num_neutrons,
                show_progress=show_progress,
                fission_chain=fission_chain,
                use_parallel=use_parallel,
                n_cores=n_cores
            )
            
            # Hi·ªÉn th·ªã th·ªùi gian ch·∫°y v√† th√¥ng tin
            st.info(locale.get_text("monte.execution_time", time=results['elapsed_time']))
            
            # Hi·ªÉn th·ªã t√≥m t·∫Øt th·ªëng k√™
            st.subheader("T√≥m t·∫Øt k·∫øt qu·∫£")
            stats_col1, stats_col2, stats_col3 = st.columns(3)
            with stats_col1:
                st.metric("T·ªïng s·ªë t∆∞∆°ng t√°c", 
                         value=results['fissions'] + results['absorptions'] + results['escapes'])
            with stats_col2:
                if 'max_generation' in results:
                    st.metric("S·ªë th·∫ø h·ªá m√¥ ph·ªèng", value=results['max_generation'])
            with stats_col3:
                if results['k_effective'] is not None:
                    k_status = "üü¢ G·∫ßn t·ªõi h·∫°n"
                    if results['k_effective'] < 0.95:
                        k_status = "üîµ D∆∞·ªõi t·ªõi h·∫°n"
                    elif results['k_effective'] > 1.05:
                        k_status = "üî¥ Tr√™n t·ªõi h·∫°n"
                    st.metric("Tr·∫°ng th√°i h·ªá th·ªëng", value=k_status)
            
            # T·∫°o bi·ªÉu ƒë·ªì ph√¢n b·ªë t∆∞∆°ng t√°c
            interaction_counts = [results['fissions'], results['absorptions'], results['escapes']]
            interaction_labels = [locale.get_text("monte.fissions"), 
                                 locale.get_text("monte.absorptions"), 
                                 locale.get_text("monte.escapes")]
            
            fig1 = px.bar(
                x=interaction_labels,
                y=interaction_counts,
                color=interaction_labels,
                title=locale.get_text("chart.interaction_distribution")
            )
            
            fig1.update_layout(
                xaxis_title=locale.get_text("chart.interaction_type"),
                yaxis_title=locale.get_text("chart.count"),
                template=theme_manager.get_template()
            )
            
            plotly_chart_with_theme(fig1, use_container_width=True)
            
            # T·∫°o bi·ªÉu ƒë·ªì ph√¢n b·ªë ƒë∆∞·ªùng ƒëi
            fig2 = px.histogram(
                results['path_lengths'],
                nbins=50,
                title=locale.get_text("chart.path_length_distribution"),
                color_discrete_sequence=['green']
            )
            
            fig2.update_layout(
                xaxis_title=locale.get_text("chart.path_length"),
                yaxis_title=locale.get_text("chart.frequency"),
                template=theme_manager.get_template()
            )
            
            # Bi·ªÉu ƒë·ªì v·ªã tr√≠ cu·ªëi c√πng
            fig3 = px.histogram(
                results['final_positions'],
                nbins=50,
                title=locale.get_text("chart.final_position"),
                color_discrete_sequence=['purple']
            )
            
            fig3.update_layout(
                xaxis_title=locale.get_text("chart.radial_position"),
                yaxis_title=locale.get_text("chart.frequency"),
                template=theme_manager.get_template()
            )
            
            # Th√™m ƒë∆∞·ªùng ranh gi·ªõi h·ªá th·ªëng
            fig3.add_vline(x=radius, line_dash="dash", line_color="red",
                          annotation_text=locale.get_text("chart.system_boundary"))
            
            # Hi·ªÉn th·ªã hai bi·ªÉu ƒë·ªì trong m·ªôt h√†ng
            col1, col2 = st.columns(2)
            with col1:
                plotly_chart_with_theme(fig2, use_container_width=True)
            with col2:
                plotly_chart_with_theme(fig3, use_container_width=True)
            
            # Ki·ªÉm tra v√† hi·ªÉn th·ªã k·∫øt qu·∫£ t√≠nh to√°n k-hi·ªáu qu·∫£
            if results['k_effective'] is not None:
                st.subheader(locale.get_text("monte.k_effective", value=results['k_effective'], error=results['k_error']))
                
                # Bi·ªÉu ƒë·ªì qu·∫ßn th·ªÉ neutron theo th·∫ø h·ªá
                gen_fig = go.Figure()
                gen_fig.add_trace(go.Scatter(
                    x=list(range(len(results['generation_sizes']))),
                    y=results['generation_sizes'],
                    mode='lines+markers',
                    line=dict(color='blue', width=2)
                ))
                
                gen_fig.update_layout(
                    title=locale.get_text("chart.neutron_generation"),
                    xaxis_title=locale.get_text("chart.generation"),
                    yaxis_title=locale.get_text("chart.neutron_count"),
                    template=theme_manager.get_template()
                )
                
                plotly_chart_with_theme(gen_fig, use_container_width=True)
                
                # Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng
                if results['k_effective'] < 0.95:
                    st.error(locale.get_text("chart.subcritical"))
                elif results['k_effective'] > 1.05:
                    st.warning(locale.get_text("chart.supercritical"))
                else:
                    st.success(locale.get_text("chart.critical"))
                
                # Hi·ªÉn th·ªã th√¥ng tin h·ªôi t·ª•
                if 'max_generation' in results and results['max_generation'] < max_generations:
                    st.success(f"M√¥ ph·ªèng ƒë√£ h·ªôi t·ª• sau {results['max_generation']} th·∫ø h·ªá.")
                    
            # N·∫øu s·ª≠ d·ª•ng t√≠nh to√°n ƒëa nh√≥m, hi·ªÉn th·ªã ph√¢n t√≠ch ph·ªï nƒÉng l∆∞·ª£ng
            if energy_groups > 1:
                st.subheader("Ph√¢n t√≠ch ph·ªï nƒÉng l∆∞·ª£ng")
                
                # T·∫°o bi·ªÉu ƒë·ªì cho ph·ªï nƒÉng l∆∞·ª£ng
                energy_fig = go.Figure()
                
                # Gi·∫£ ƒë·ªãnh c√°c nh√≥m nƒÉng l∆∞·ª£ng theo th·ª© t·ª± gi·∫£m d·∫ßn
                energy_boundaries = np.logspace(1, -5, energy_groups + 1)  # T·ª´ 10 MeV ƒë·∫øn 0.00001 MeV
                group_names = [f"Nh√≥m {i+1}<br>({energy_boundaries[i]:.2e}-{energy_boundaries[i+1]:.2e} MeV)" 
                              for i in range(energy_groups)]
                
                # V·∫Ω ti·∫øt di·ªán theo nh√≥m nƒÉng l∆∞·ª£ng
                x = list(range(energy_groups))
                
                energy_fig.add_trace(go.Bar(
                    x=x, 
                    y=model.fission_xs if isinstance(model.fission_xs, np.ndarray) else [model.fission_xs] * energy_groups,
                    name='Ti·∫øt di·ªán ph√¢n h·∫°ch',
                    marker_color='red'
                ))
                
                energy_fig.add_trace(go.Bar(
                    x=x, 
                    y=model.scattering_xs if isinstance(model.scattering_xs, np.ndarray) else [model.scattering_xs] * energy_groups,
                    name='Ti·∫øt di·ªán t√°n x·∫°',
                    marker_color='blue'
                ))
                
                energy_fig.add_trace(go.Bar(
                    x=x, 
                    y=model.absorption_xs if isinstance(model.absorption_xs, np.ndarray) else [model.absorption_xs] * energy_groups,
                    name='Ti·∫øt di·ªán h·∫•p th·ª•',
                    marker_color='green'
                ))
                
                energy_fig.update_layout(
                    title="Ph√¢n t√≠ch ti·∫øt di·ªán theo nh√≥m nƒÉng l∆∞·ª£ng",
                    xaxis_title="Nh√≥m nƒÉng l∆∞·ª£ng",
                    yaxis_title="Ti·∫øt di·ªán (cm‚Åª¬π)",
                    barmode='group',
                    xaxis=dict(
                        tickmode='array',
                        tickvals=x,
                        ticktext=group_names
                    ),
                    template=theme_manager.get_template()
                )
                
                plotly_chart_with_theme(energy_fig, use_container_width=True)
                
                st.info("Trong t√≠nh to√°n ƒëa nh√≥m, nh√≥m 1 t∆∞∆°ng ·ª©ng v·ªõi nƒÉng l∆∞·ª£ng cao nh·∫•t v√† gi·∫£m d·∫ßn theo s·ªë th·ª© t·ª± nh√≥m")
    
    # Ph·∫ßn k·∫øt lu·∫≠n khoa h·ªçc
    with st.expander(locale.get_text("conclusions.title"), expanded=True):
        st.markdown(get_conclusions("monte_carlo", locale.current_lang)) 